_M={}local a=0x07;local b=0x08;function _M.parse_camera_settings(c)local d={10,25,50,100}local e={'SPOT','CENTER_WEIGHTED','AVERAGE'}local f={}f.quality=d[string.byte(c,1)+1]f.auto_exp_gain_times=string.byte(c,2)f.metering=e[string.byte(c,3)+1]f.exposure=string.byte(c,4)/255.0;f.exposure_speed=string.byte(c,5)/255.0;f.shutter_limit=string.byte(c,6)<<8|string.byte(c,7)f.analog_gain_limit=string.byte(c,8)f.white_balance_speed=string.byte(c,9)/255.0;return f end;function _M.camera_capture_and_send(g)quality=g.quality or 50;auto_exp_gain_times=g.auto_exp_gain_times or 0;metering=g.metering or'AVERAGE'exposure=g.exposure or 0.18;exposure_speed=g.exposure_speed or 0.5;shutter_limit=g.shutter_limit or 800;analog_gain_limit=g.analog_gain_limit or 248.0;white_balance_speed=g.white_balance_speed or 0.5;for h=1,auto_exp_gain_times,1 do frame.camera.auto{metering=metering,exposure=exposure,exposure_speed=exposure_speed,shutter_limit=shutter_limit,analog_gain_limit=analog_gain_limit,white_balance_speed=white_balance_speed}frame.sleep(0.1)end;frame.camera.capture{quality_factor=quality}while not frame.camera.image_ready()do frame.sleep(0.05)end;local i=0;local c=''while true do c=frame.camera.read_raw(frame.bluetooth.max_length()-4)if c~=nil then pcall(frame.bluetooth.send,string.char(a)..c)i=i+string.len(c)frame.sleep(0.0125)else pcall(frame.bluetooth.send,string.char(b))frame.sleep(0.0125)break end end end;return _M